# This is the Docker compose file that we can include all our roboshops componets 
#(i.e containers) as services.we are including dependencies as well.
# After running the build command we can run this then it will start running.

# networks:
#   default:
#     driver: bridge
#     name: roboshop
#     external: true #I created network already using docker network create roboshop
# services:
#   mongodb:
#     image: janardhanj265/mongodb:v1
#     container_name: mongodb
#   catalogue:
#     image: janardhanj265/catalogue:v1
#     container_name: catalogue
#     depends_on:
#     - mongodb
#   redis:
#     image: redis:7.0
#     container_name: redis
#   user:
#     image: janardhanj265/user:v1
#     container_name: user
#     depends_on:
#     - redis
#     - mongodb
#   cart:
#     image: janardhanj265/cart:v1
#     container_name: cart
#     depends_on:
#     - catalogue
#     - redis
#   mysql:
#     image: janardhanj265/mysql:v1
#     container_name: mysql
#   shipping:
#     image: janardhanj265/shipping:v1
#     container_name: shipping
#     depends_on:
#     - mysql
#     - cart
#   rabbitmq:
#     image: rabbitmq:3
#     container_name: rabbitmq
#     environment:
#       RABBITMQ_DEFAULT_USER: roboshop
#       RABBITMQ_DEFAULT_PASS: roboshop123
#   payment:
#     image: janardhanj265/payment:v1
#     container_name: payment
#     environment:
#       CART_HOST: cart
#       CART_PORT: 8080
#       USER_HOST: user
#       USER_PORT: 8080
#       AMQP_HOST: rabbitmq
#       AMQP_USER: roboshop
#       AMQP_PASS: roboshop123
#     depends_on:
#     - rabbitmq
#     - cart
#     - user
#   frontend:
#     image: janardhanj265/frontend:v1
#     container_name: frontend
#     ports:
#     - "80:80"
#     depends_on:
#     - catalogue
#     - user
#     - cart
#     - shipping
#     - payment
      


# the below script is for creating volumes for our services .if we dellete the services
# we have a backup
networks:
  default:
    driver: bridge
    name: roboshop
    external: true #I created network already using docker network create roboshop
volumes:
  mongodb:
  redis:
  mysql:
  rabbitmq: # docker volume create rabbitmq
services:
  mongodb:
    image: janardhanj265/mongodb:v1
    container_name: mongodb
    volumes:
    - mongodb:/data/db
  catalogue:
    image: janardhanj265/catalogue:v1
    container_name: catalogue
    depends_on:
    - mongodb
  redis:
    image: redis:7.0
    container_name: redis
    volumes:
    - redis:/data
  user:
    image: janardhanj265/user:v1
    container_name: user
    depends_on:
    - redis
    - mongodb
  cart:
    image: janardhanj265/cart:v1
    container_name: cart
    depends_on:
    - catalogue
    - redis
  mysql:
    image: janardhanj265/mysql:v1
    container_name: mysql
    volumes:
    - mysql:/var/lib/mysql
  shipping:
    image: janardhanj265/shipping:v1
    container_name: shipping
    depends_on:
    - mysql
    - cart
  rabbitmq:
    image: rabbitmq:3
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: roboshop
      RABBITMQ_DEFAULT_PASS: roboshop123
    volumes:
    - rabbitmq:/var/lib/rabbitmq
  payment:
    image: janardhanj265/payment:v1
    container_name: payment
    environment:
      CART_HOST: cart
      CART_PORT: 8080
      USER_HOST: user
      USER_PORT: 8080
      AMQP_HOST: rabbitmq
      AMQP_USER: roboshop
      AMQP_PASS: roboshop123
    depends_on:
    - rabbitmq
    - cart
    - user
  frontend:
    image: janardhanj265/frontend:v1
    container_name: frontend
    ports:
    - "80:80"
    depends_on:
    - catalogue
    - user
    - cart
    - shipping
    - payment
      
